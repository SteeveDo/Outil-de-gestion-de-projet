name: CI/CD Pipeline

on:
  push:
    branches:
      - development
      - preproduction
      - production
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON}}
      PLATFORM_DATABASE: ${{secrets.PLATFORM_DATABASE}}
      USERS_TABLE: ${{secrets.USERS_TABLE}}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
    
      - name: Clear npm cache for back-end
        run: npm cache clean --force
        working-directory: node-server
      
      - name: Install back-end dependencies
        run: npm install
        working-directory: node-server

      - name: Run tests for back-ennd
        id: test-back
        run: npm test
        working-directory: node-server

      - name: Clear npm cache for front-end
        run: npm cache clean --force
        working-directory: frontend
      
      - name: Install front-end dependencies
        run: npm install
        working-directory: frontend

      - name: Run tests for front-ennd
        id: test-front
        run: npm test
        working-directory: frontend

      - name: Start back-end project
        run: |
          echo back-end
        working-directory: node-server
        if: (steps.test-back.outcome == 'success') 

      - name: Start front-end project
        run: |
          echo front-end
        working-directory: frontend
        if: (steps.test-front.outcome == 'success')      

      - name: Deploy to production
        if: (github.ref == 'refs/heads/development') && (steps.test-back.outcome == 'success') && (steps.test-front.outcome == 'success')
        run: |
          echo "production"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build and push Docker image
        if: success() && github.ref == 'refs/heads/development'
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u heunasteeve --password-stdin
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push
        